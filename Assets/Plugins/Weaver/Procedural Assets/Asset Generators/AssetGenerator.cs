// Weaver // https://kybernetik.com.au/weaver // Copyright 2021 Kybernetik //

#if UNITY_EDITOR

using System;
using System.IO;
using System.Reflection;
using System.Text;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;
using Object = UnityEngine.Object;

namespace Weaver.Editor.Procedural
{
    /// <summary>[Editor-Only]
    /// Specifies which asset type can be generated by the attributed class (which must inherit from
    /// <see cref="AssetGenerator"/>).
    /// </summary>
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
    public sealed class AssetGeneratorAttribute : Attribute
    {
        /// <summary>The type of assets that can be generated by the attributed class.</summary>
        public readonly Type AssetType;

        /// <summary>Indicates that the attributed class can generate the specified `assetType`.</summary>
        public AssetGeneratorAttribute(Type assetType)
        {
            AssetType = assetType;
        }
    }

    /************************************************************************************************************************/

    /// <summary>[Editor-Only]
    /// Base class for systems which manage aspects of procedural asset generation that are unique to certain asset
    /// types: determining the asset path, finding and invoking the generator method, and saving the generated asset.
    /// </summary>
    [AssetGenerator(typeof(Object))]
    public class AssetGenerator
    {
        /************************************************************************************************************************/

        /// <summary>
        /// Gets the asset path of the existing asset and destroys all of its sub-assets.
        /// </summary>
        public virtual string GetAssetPathAndDestroyOldSubAssets(ProceduralAsset asset)
        {
            var assetPath = AssetDatabase.GetAssetPath(asset.Injector.Asset);

            if (asset.SavedProceduralData.hasSubAssets)
            {
                WeaverEditorUtilities.DestroySubAssets(assetPath);
                asset.SavedProceduralData.hasSubAssets = false;
            }

            return assetPath;
        }

        /************************************************************************************************************************/

        /// <summary>.asset</summary>
        public virtual string DefaultFileExtension => ".asset";

        /************************************************************************************************************************/
        #region Generator Method
        /************************************************************************************************************************/

        /// <summary>Attempts to find the generator method assofiated with `assetField`.</summary>
        public MethodInfo GetGeneratorMethod(MemberInfo targetMember)
        {
            return GetGeneratorMethod(targetMember, "Generate" + targetMember.Name);
        }

        /************************************************************************************************************************/

        /// <summary>
        /// Finds the generator method associated with a particular procedural asset.
        /// </summary>
        public virtual MethodInfo GetGeneratorMethod(MemberInfo targetMember, string methodName)
        {
            return GetMethod(targetMember, methodName, GeneratorMethodParameterTypes);
        }

        /************************************************************************************************************************/

        /// <summary>
        /// Finds the generator method associated with a particular procedural asset.
        /// </summary>
        public MethodInfo GetMethod(MemberInfo targetMember, string name, Type[] parameterTypes)
        {
            var declaringType = targetMember.DeclaringType;

            GetMethod:
            var method = declaringType.GetMethod(name, ReflectionUtilities.StaticBindings,
                null, CallingConventions.Any, parameterTypes, null);

            if (method == null)
            {
                declaringType = declaringType.BaseType;
                if (declaringType != null)
                    goto GetMethod;
            }

            if (method != null &&
                ValidateGeneratorReturnType(method.ReturnType) &&
                !method.IsGenericMethod)
                return method;

            return null;
        }

        /************************************************************************************************************************/

        /// <summary>The default return type for generator methods used by this generator.</summary>
        protected virtual Type GeneratorMethodReturnType => typeof(Object);

        /// <summary>Checks if return type of a generator method is valid for this generator type.</summary>
        protected virtual bool ValidateGeneratorReturnType(Type returnType)
        {
            return GeneratorMethodReturnType.IsAssignableFrom(returnType);
        }

        /// <summary>
        /// The parameter types of a generator method for this asset type. When overriding this property, consider
        /// using <see cref="ReflectionUtilities.OneType(Type)"/> or <see cref="ReflectionUtilities.TwoTypes(Type, Type)"/>.
        /// </summary>
        protected virtual Type[] GeneratorMethodParameterTypes => Type.EmptyTypes;

        /************************************************************************************************************************/

        /// <summary>Invokes `asset.GeneratorMethod` with the correct parameters for this <see cref="AssetGenerator"/>.</summary>
        public virtual Object InvokeGeneratorMethod(ProceduralAsset asset)
        {
            return asset.GeneratorMethod.Invoke(null, null) as Object;
        }

        /************************************************************************************************************************/
        #endregion
        /************************************************************************************************************************/
        #region Saving
        /************************************************************************************************************************/

        /// <summary>Creates and saves an empty default asset to save sub assets inside while the asset is still generating.</summary>
        public virtual void SaveDefaultAsset(string assetPath)
        {
            AssetDatabase.CreateAsset(new Object(), assetPath);
        }

        /************************************************************************************************************************/

        /// <summary>
        /// Saves `obj` as an asset file at `assetPath`. If successful, the `obj` is destroyed and the reference is
        /// replaced with the newly saved asset.
        /// </summary>
        public virtual void Save(ref Object obj, string assetPath, out bool hasSubAssets)
        {
            if (obj == null)
            {
                hasSubAssets = false;
                return;
            }

            obj.name = Path.GetFileNameWithoutExtension(assetPath);
            obj.hideFlags = HideFlags.NotEditable;
            AssetDatabase.CreateAsset(obj, assetPath);

            var asset = AssetDatabase.LoadAssetAtPath(assetPath, obj.GetType());
            if (asset == null)
            {
                hasSubAssets = false;
                return;
            }

            hasSubAssets = WeaverEditorUtilities.SaveSubAssets(obj, asset);

            Destroy(obj);

            ProceduralAsset.InvokeOnImportAsset(assetPath);

            obj = asset;
        }

        /************************************************************************************************************************/

        /// <summary>
        /// Destroys the specified `obj`.
        /// </summary>
        public virtual void Destroy(Object obj)
        {
            if (!AssetDatabase.Contains(obj))
                Object.DestroyImmediate(obj);
        }

        /************************************************************************************************************************/
        #endregion
        /************************************************************************************************************************/
        #region Misc
        /************************************************************************************************************************/

        /// <summary>
        /// Indicates whether a temporary scene should be opened while generating the specified `asset`.
        /// Default is false.
        /// </summary>
        public virtual bool UseTempScene(ProceduralAsset asset) => false;

        /************************************************************************************************************************/

        /// <summary>Appends the full description of this <see cref="AssetGenerator"/> and how it is to be used.</summary>
        public void AppendFullDescription(StringBuilder text)
        {
            text.AppendLineConst()
                .Append("- Method Return Type: ")
                .Append(GeneratorMethodReturnType.GetNameCS())
                .AppendLineConst()
                .Append("- Method Parameters: (");

            var parameters = GeneratorMethodParameterTypes;
            for (int i = 0; i < parameters.Length; i++)
            {
                if (i > 0)
                    text.Append(", ");
                text.Append(parameters[i].GetNameCS());
            }

            text.Append(")")
                .AppendLineConst()
                .Append("- Default File Extension: ")
                .Append(DefaultFileExtension)
                .AppendLineConst()
                .Append("- To Cancel Generation: ")
                .Append(HowToCancel);
        }

        /************************************************************************************************************************/

        /// <summary>Explains how to cancel the generation of an asset (for <see cref="AppendFullDescription"/>).</summary>
        public virtual string HowToCancel
        {
            get { return "return null"; }
        }

        /************************************************************************************************************************/

        /// <summary>Populates `menu` with various items for the context menu of `asset`.</summary>
        public virtual void AddItemsToMenu(GenericMenu menu, ProceduralAsset asset)
        {
            WeaverEditorUtilities.AddLinkToURL(menu, "Help/Asset Generators", "/docs/procedural-assets");
        }

        /************************************************************************************************************************/

        internal virtual void AppendOverlayMessage(StringBuilder text, ProceduralAsset asset)
        {
            text.AppendLineConst(asset.GeneratorMethod.GetNameCS());
        }

        /************************************************************************************************************************/
        #endregion
        /************************************************************************************************************************/
    }
}

#endif

