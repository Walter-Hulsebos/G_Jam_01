// Weaver // https://kybernetik.com.au/weaver // Copyright 2021 Kybernetik //

#if UNITY_EDITOR

using System;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using Weaver.Editor.Procedural;
using Object = UnityEngine.Object;

namespace Weaver.Editor
{
    /// <summary>[Editor-Only, Internal]
    /// Details about the assets generated by a <see cref="ProceduralAsset"/> for an <see cref="AssetListBase"/>.
    /// </summary>
    [Serializable]
    internal sealed class ProceduralAssetListData : IReferenceIndex
    {
        /************************************************************************************************************************/

        [SerializeField]
        private int _ReferencedIndex;
        public int ReferencedIndex
        {
            get => _ReferencedIndex;
            set => _ReferencedIndex = value;
        }

        [SerializeField]
        private Object[] _Assets;

        [SerializeField]
        private bool[] _AssetsHaveSubAssets;

        [NonSerialized]
        private Dictionary<string, int> _AssetNameToIndex;

        [NonSerialized]
        private List<Object> _NewAssets;

        [NonSerialized]
        private List<bool> _NewAssetsHaveSubAssets;

        /************************************************************************************************************************/

        public ProceduralAssetListData(int referencedIndex)
        {
            _ReferencedIndex = referencedIndex;
        }

        /************************************************************************************************************************/

        public Dictionary<string, int> OldAssetNameToIndex
        {
            get
            {
                if (_AssetNameToIndex == null)
                {
                    WeaverUtilities.GetDictionary(out _AssetNameToIndex);

                    if (_Assets != null)
                    {
                        for (int i = 0; i < _Assets.Length; i++)
                        {
                            var asset = _Assets[i];
                            if (asset != null)
                                _AssetNameToIndex.Add(asset.name, i);
                        }
                    }
                }

                return _AssetNameToIndex;
            }
        }

        /************************************************************************************************************************/

        public Object GetAndClearOldAsset(int index)
        {
            var asset = _Assets[index];
            _Assets[index] = null;
            return asset;
        }

        public bool GetOldHasSubAssets(int index)
        {
            return _AssetsHaveSubAssets[index];
        }

        /************************************************************************************************************************/

        public void AddNewAsset(Object asset, bool hasSubAssets)
        {
            if (_NewAssets == null)
            {
                WeaverUtilities.GetList(out _NewAssets);
                WeaverUtilities.GetList(out _NewAssetsHaveSubAssets);
            }

            _NewAssets.Add(asset);
            _NewAssetsHaveSubAssets.Add(hasSubAssets);
        }

        /************************************************************************************************************************/

        public void DeleteOldAssets()
        {
            if (_Assets == null)
                return;

            for (int i = 0; i < _Assets.Length; i++)
            {
                var asset = _Assets[i];
                if (asset != null)
                {
                    var assetPath = AssetDatabase.GetAssetPath(asset);

#if WEAVER_DEBUG
                    if (WeaverSettings.ProceduralAssets.notifyWhenDeletingOldAssets)
                        Debug.Log("Procedural Asset List deleting old asset: " + assetPath);
#endif

                    AssetDatabase.DeleteAsset(assetPath);
                    //ProceduralAssetOverlay.ClearCache();
                }
            }

            if (_AssetNameToIndex != null)
            {
                _AssetNameToIndex.Release();
                _AssetNameToIndex = null;
            }

            if (_NewAssets == null)
                return;

            WeaverUtilities.SetSize(ref _Assets, _NewAssets.Count);
            WeaverUtilities.SetSize(ref _AssetsHaveSubAssets, _NewAssets.Count);

            for (int i = 0; i < _NewAssets.Count; i++)
            {
                _Assets[i] = _NewAssets[i];
                _AssetsHaveSubAssets[i] = _NewAssetsHaveSubAssets[i];
            }

            _NewAssets.Release();
            _NewAssets = null;

            _NewAssetsHaveSubAssets.Release();
            _NewAssetsHaveSubAssets = null;
        }

        /************************************************************************************************************************/
    }
}

#endif

